#include <iostream>
#include <string.h>
using namespace std;
struct node
{
    int data;
    node *left,*right,*parent;
}*root=NULL;
int arr[10],ind=0;
node * makenode(int data)
{
    node *temp=new node;
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    temp->parent=NULL;
    return temp;
    
}
node *maketree()
{
    node *temp;
    temp=makenode(5);
    root=temp;
    root->parent=NULL;
    temp=makenode(4);
    root->left=temp;
    temp->parent=root;
    temp=makenode(8);
    root->right=temp;
    temp->parent=root;
    temp=makenode(3);
    root->left->left=temp;
    temp->parent=root->left;
    temp=makenode(2);
    root->left->left->left=temp;
    temp->parent=root->left->left;
    temp=makenode(11);
    root->right->right=temp;
    temp->parent=root->right;
    temp=makenode(7);
    root->right->left=temp;
    temp->parent=root->right;
    temp=makenode(6);
    root->right->left->left=temp;
    temp->parent=root->right->left;

    return root;
}

void inorder(node *root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        cout<<root->data<<" ";
        arr[ind++]=root->data;
        inorder(root->right);
    }
    
}

void traverse(node *root,int arr[],int &n)
{
    if(root!=NULL)
    {
        traverse(root->left,arr,n);
        arr[n++]=root->data;
        traverse(root->right,arr,n);
    }
}
int check(node *root,int a,int b)
{
    int flaga=0,flagb=0,flag=0;
    int arr1[20],n1=0;
    traverse(root,arr1,n1);
    for(int i=0;i<n1;i++)
    {
        if(arr1[i]==a)
            flaga=1;
        if(arr1[i]==b)
            flagb=1;
    }
    flag=flaga&flagb;
    return flag;
}

void findcommon(node *root,int a,int b)
{
    int check1=0;
    int check2=0;
    check1=check(root->right,a,b);
    check2=check(root->left,a,b);
    if(check1)
        findcommon(root->right,a,b);
    else if(check2)
        findcommon(root->left,a,b);
    else cout<<root->data<<endl;
}


int main() {
    root=maketree();
    inorder(root);
    cout<<endl;
    int a=7,b=11;
    findcommon(root,a,b);
    return 0;
}
