#include <iostream>
#include <string.h>
using namespace std;
struct node
{
    int data;
    node *left,*right;
}*root=NULL,*root_2=NULL;

node * makenode(int data)
{
    node *temp=new node;
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    return temp;
    
}
node *maketree()
{
    node *temp;
    temp=makenode(5);
    root=temp;
    
    temp=makenode(4);
    root->left=temp;
   
    temp=makenode(8);
    root->right=temp;
    
    temp=makenode(3);
    root->left->left=temp;
   
    temp=makenode(2);
    root->left->left->left=temp;
  
    temp=makenode(11);
    root->right->right=temp;
  
    temp=makenode(7);
    root->right->left=temp;
  
    temp=makenode(6);
    root->right->left->left=temp;

    return root;
}


node *maketree2()
{
    node *temp;
    temp=makenode(8);
    root_2=temp;
    
       temp=makenode(7);
    root_2->left=temp;
    
    temp=makenode(11);
    root_2->right=temp;
    
    temp=makenode(6);
    root_2->left->left=temp;
    
    return root_2;
}


void inorder(node *root, int arr[],int &ind)
{
        if(root)
        {
        inorder(root->left, arr,ind);
        arr[ind++]=root->data;
        inorder(root->right,arr,ind);
        }
        else
        {
            arr[ind++]=-1;
        }
    
}


void preorder(node *root, int arr[],int &ind)
{
    if(root)
    {
        arr[ind++]=root->data;
        preorder(root->left, arr,ind);
        preorder(root->right,arr,ind);
    }
    else
    {
        arr[ind++]=-1;
    }
    
}


int checksubstring(int large[],int small[],int l,int s)
{
    int flag1=0,flag2=0;
    for(int i=0;i<l;i++)
    {
        int j=0,flag2=0,flag1=0;
        if(large[i]==small[0])
        {
            flag1=1;
            for(j=1;j<s;j++)
            {
                if(large[i+j]!=small[j])
                {
                    flag2=1;
                    break;
                }
            }
            if(flag2==0 && flag1==1)
            {
                return 1;
            }
        }
       
    }
    
    
    return 0;
}

void checktrees(node *root,node *root_2)
{
    int pre1[100],pre2[100],in1[100],in2[100];
    int p1=0,p2=0,i1=0,i2=0;
    inorder(root,in1,i1);
    inorder(root_2,in2,i2);
    preorder(root,pre1,p1);
    preorder(root_2,pre2,p2);
    if(checksubstring(in1,in2,i1,i2) & checksubstring(pre1,pre2,p1,p2))
        cout<<"Subtree of first"<<endl;
    else
        cout<<"Not a subtree of first"<<endl;
    
}


int main() {
    root=maketree();
    node *root_2=maketree2();
    checktrees(root,root_2);
    return 0;
}
